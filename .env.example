# ==============================================================================
# ENVIRONMENT CONFIGURATION TEMPLATE
# ==============================================================================
# Copy this file to .env and update the values for your environment
# Never commit the actual .env file to version control!

# ==============================================================================
# SERVER CONFIGURATION
# ==============================================================================
NODE_ENV=development
PORT=3000
API_VERSION=v1

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================
# MySQL Configuration
DB_HOST=localhost
DB_PORT=3306
DB_NAME=backend_template_dev
DB_USER=your_database_user
DB_PASS=your_database_password
DB_DIALECT=mysql

# Connection Pool Settings
DB_POOL_MAX=10
DB_POOL_MIN=0
DB_POOL_ACQUIRE=30000
DB_POOL_IDLE=10000

# ==============================================================================
# REDIS CONFIGURATION (Optional - for caching and sessions)
# ==============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_KEY_PREFIX=backend_template:

# ==============================================================================
# JWT AUTHENTICATION
# ==============================================================================
# Generate a strong, random secret key (minimum 32 characters)
# You can use: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your_super_secure_jwt_secret_key_here_at_least_32_characters_long
JWT_EXPIRE=7d
JWT_REFRESH_EXPIRE=30d

# ==============================================================================
# EMAIL CONFIGURATION
# ==============================================================================
# SMTP Settings for password reset and notifications
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_specific_password
EMAIL_FROM=noreply@yourdomain.com
EMAIL_FROM_NAME=Backend Template

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================
# CORS Configuration
CORS_ORIGIN=http://localhost:3000,http://localhost:3001
CORS_CREDENTIALS=true

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS=true

# Helmet Security Headers
HELMET_CONTENT_SECURITY_POLICY=true
HELMET_HSTS_MAX_AGE=31536000

# ==============================================================================
# FILE UPLOAD CONFIGURATION
# ==============================================================================
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=jpg,jpeg,png,gif,pdf,doc,docx
UPLOAD_TEMP_DIR=./tmp

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
LOG_LEVEL=info
LOG_FILE_ENABLED=true
LOG_DIR=./logs
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5
LOG_DATE_PATTERN=YYYY-MM-DD

# ==============================================================================
# THIRD-PARTY SERVICES
# ==============================================================================
# AWS S3 (Optional - for file storage)
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-s3-bucket-name

# Cloudinary (Optional - for image processing)
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# Sentry (Optional - for error tracking)
SENTRY_DSN=your_sentry_dsn_url
SENTRY_ENVIRONMENT=development

# Google Analytics (Optional - for API analytics)
GA_TRACKING_ID=UA-XXXXXXXXX-X

# ==============================================================================
# PAYMENT PROCESSING (Optional)
# ==============================================================================
# Stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# PayPal
PAYPAL_CLIENT_ID=your_paypal_client_id
PAYPAL_CLIENT_SECRET=your_paypal_client_secret
PAYPAL_MODE=sandbox

# ==============================================================================
# SOCIAL AUTHENTICATION (Optional)
# ==============================================================================
# Google OAuth
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Facebook OAuth
FACEBOOK_APP_ID=your_facebook_app_id
FACEBOOK_APP_SECRET=your_facebook_app_secret

# GitHub OAuth
GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret

# ==============================================================================
# DEVELOPMENT TOOLS
# ==============================================================================
# API Documentation
ENABLE_API_DOCS=true
API_DOCS_PATH=/api-docs

# Development Features
ENABLE_MOCK_DATA=false
ENABLE_DEBUG_ROUTES=false
ENABLE_PROFILING=false

# ==============================================================================
# RENDER.COM DEPLOYMENT CONFIGURATION
# ==============================================================================
# These variables are automatically set by Render
# You don't need to set these locally, they're for reference

# Render sets PORT to 10000 automatically
# PORT=10000

# Database URL (auto-populated by Render when using managed database)
# DATABASE_URL=mysql://user:pass@host:port/dbname

# Redis URL (auto-populated by Render when using managed Redis)
# REDIS_URL=redis://user:pass@host:port

# Render environment
# RENDER=true
# RENDER_SERVICE_ID=srv-xxxxx
# RENDER_SERVICE_NAME=your-service-name

# ==============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# ==============================================================================
# Development (Local)
# NODE_ENV=development
# DB_NAME=backend_template_dev
# LOG_LEVEL=debug
# ENABLE_DEBUG_ROUTES=true
# ENABLE_API_DOCS=true

# Staging (develop branch → staging environment)
# NODE_ENV=staging
# DB_NAME=backend_template_staging
# LOG_LEVEL=info
# ENABLE_API_DOCS=true
# CORS_ORIGIN=https://staging-frontend.yourdomain.com
# EMAIL_FROM=staging-noreply@yourdomain.com

# Production (main/master branch → production environment)
# NODE_ENV=production
# DB_NAME=backend_template_prod
# LOG_LEVEL=warn
# LOG_FILE_ENABLED=true
# ENABLE_API_DOCS=false
# ENABLE_DEBUG_ROUTES=false
# CORS_ORIGIN=https://app.yourdomain.com
# EMAIL_FROM=noreply@yourdomain.com

# ==============================================================================
# QUICK SETUP GUIDE
# ==============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Update database credentials (DB_USER, DB_PASS, DB_NAME)
# 3. Generate JWT secret: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 4. Configure email settings for password reset functionality
# 5. Set CORS_ORIGIN to your frontend URL
# 6. For production: set NODE_ENV=production and update all secrets

# ==============================================================================
# SECURITY NOTES
# ==============================================================================
# - Never commit the actual .env file to version control
# - Use strong, unique passwords and secrets
# - Rotate secrets regularly in production
# - Use environment-specific values for each deployment
# - Consider using a secret management service for production
