# ==============================================================================
# ENVIRONMENT CONFIGURATION TEMPLATE
# ==============================================================================
# Copy this file to .env and update the values for your environment
# Never commit the actual .env file to version control!

# ==============================================================================
# SERVER CONFIGURATION
# ==============================================================================
NODE_ENV=development
PORT=3000
API_VERSION=v1

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================
# MySQL Configuration
DB_HOST=localhost
DB_PORT=3306
DB_NAME=backend_template_dev
DB_USER=your_database_user
DB_PASS=your_database_password
DB_DIALECT=mysql

# Connection Pool Settings
DB_POOL_MAX=10
DB_POOL_MIN=0
DB_POOL_ACQUIRE=30000
DB_POOL_IDLE=10000

# ==============================================================================
# REDIS CONFIGURATION (Optional - for caching and sessions)
# ==============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_KEY_PREFIX=backend_template:

# ==============================================================================
# JWT AUTHENTICATION
# ==============================================================================
# Generate a strong, random secret key (minimum 32 characters)
# You can use: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your_super_secure_jwt_secret_key_here_at_least_32_characters_long
JWT_EXPIRE=7d
JWT_REFRESH_EXPIRE=30d

# ==============================================================================
# EMAIL CONFIGURATION
# ==============================================================================
# SMTP Settings for password reset and notifications
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_specific_password
EMAIL_FROM=noreply@yourdomain.com
EMAIL_FROM_NAME=Backend Template

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================
# CORS Configuration
CORS_ORIGIN=http://localhost:3000,http://localhost:3001
CORS_CREDENTIALS=true

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS=true

# Security Headers
HELMET_CONTENT_SECURITY_POLICY=true
HELMET_HSTS_MAX_AGE=31536000

# ==============================================================================
# FILE UPLOAD CONFIGURATION
# ==============================================================================
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=5242880
ALLOWED_FILE_TYPES=jpg,jpeg,png,gif,pdf,doc,docx
UPLOAD_TEMP_DIR=./tmp

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
LOG_LEVEL=info
LOG_FILE_ENABLED=true
LOG_DIR=./logs
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5
LOG_DATE_PATTERN=YYYY-MM-DD

# ==============================================================================
# DEVELOPMENT TOOLS
# ==============================================================================
# API Documentation
ENABLE_API_DOCS=true
API_DOCS_PATH=/api-docs

# Development Features
ENABLE_MOCK_DATA=false
ENABLE_DEBUG_ROUTES=false
ENABLE_PROFILING=false

# ==============================================================================
# OPTIONAL THIRD-PARTY SERVICES
# ==============================================================================
# Uncomment and configure these if you need them

# # AWS S3 (for file storage)
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-s3-bucket-name

# # Cloudinary (for image processing)
# CLOUDINARY_CLOUD_NAME=your_cloud_name
# CLOUDINARY_API_KEY=your_api_key
# CLOUDINARY_API_SECRET=your_api_secret

# # Sentry (for error tracking)
# SENTRY_DSN=your_sentry_dsn_url
# SENTRY_ENVIRONMENT=development

# # Stripe (for payments)
# STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
# STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
# STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# # Google OAuth (for social login)
# GOOGLE_CLIENT_ID=your_google_client_id
# GOOGLE_CLIENT_SECRET=your_google_client_secret

# # GitHub OAuth (for social login)
# GITHUB_CLIENT_ID=your_github_client_id
# GITHUB_CLIENT_SECRET=your_github_client_secret

# ==============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATION
# ==============================================================================
# Development (Local) - Default settings
NODE_ENV=development
DB_NAME=backend_template_dev
LOG_LEVEL=debug
ENABLE_DEBUG_ROUTES=true
ENABLE_API_DOCS=true

# For different environments, create separate files:
# .env.development, .env.test, .env.local

# ==============================================================================
# QUICK SETUP GUIDE
# ==============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Update database credentials (DB_USER, DB_PASS, DB_NAME)
# 3. Generate JWT secret: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 4. Configure email settings for password reset functionality
# 5. Set CORS_ORIGIN to your frontend URL

# ==============================================================================
# SECURITY NOTES
# ==============================================================================
# - Never commit the actual .env file to version control
# - Use strong, unique passwords and secrets
# - Generate secure JWT secrets for any production use
# - Keep development and production environments separate
