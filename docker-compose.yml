version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: backend_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: backend_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    command: redis-server --appendonly yes

  # Backend Application
  backend:
    build: .
    container_name: backend_app
    restart: unless-stopped
    ports:
      - "${PORT}:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=db
      - DB_PORT=3306
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE}
    depends_on:
      - db
      - redis
    networks:
      - backend-network
    volumes:
      - ./uploads:/usr/src/app/uploads
      - ./logs:/usr/src/app/logs
    command: sh -c "npm run db:migrate && npm start"

  # Nginx (Optional - for reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: backend_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - backend-network

volumes:
  mysql_data:
  redis_data:

networks:
  backend-network:
    driver: bridge
