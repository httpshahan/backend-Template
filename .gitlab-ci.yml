# GitLab CI/CD Pipeline Configuration
# This file defines the complete CI/CD pipeline for the backend application

stages:
  - validate
  - test
  - build
  - security
  - deploy
  - performance

variables:
  NODE_VERSION: '18'
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: '/certs'
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  LATEST_TAG: $CI_REGISTRY_IMAGE:latest

# Cache configuration
.node_cache: &node_cache
  cache:
    key: '$CI_COMMIT_REF_SLUG-node'
    paths:
      - node_modules/
      - .npm/
    policy: pull

.node_cache_push: &node_cache_push
  cache:
    key: '$CI_COMMIT_REF_SLUG-node'
    paths:
      - node_modules/
      - .npm/
    policy: push

# Before script template
.before_script_node: &before_script_node
  before_script:
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline

# Docker services
.docker_services: &docker_services
  services:
    - name: mysql:8.0
      alias: mysql
      variables:
        MYSQL_ROOT_PASSWORD: test_password
        MYSQL_DATABASE: backend_db_test
        MYSQL_USER: test_user
        MYSQL_PASSWORD: test_password
    - name: redis:7-alpine
      alias: redis

# Environment variables for testing
.test_env: &test_env
  variables:
    NODE_ENV: test
    DB_HOST: mysql
    DB_PORT: 3306
    DB_NAME: backend_db_test
    DB_USER: test_user
    DB_PASS: test_password
    JWT_SECRET: test_jwt_secret_key_for_testing_only
    REDIS_HOST: redis
    REDIS_PORT: 6379

# Install dependencies
install_dependencies:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  <<: *before_script_node
  <<: *node_cache_push
  script:
    - echo "Dependencies installed successfully"
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

# Code quality checks
lint:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - npm run lint
  artifacts:
    reports:
      junit: lint-results.xml
    when: always

format_check:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - npm run format -- --check
  allow_failure: true

# Security audit
security_audit:
  stage: validate
  image: node:${NODE_VERSION}-alpine
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - npm audit --audit-level=high
  allow_failure: true

# Unit tests
unit_tests:
  stage: test
  image: node:${NODE_VERSION}-alpine
  <<: *docker_services
  <<: *test_env
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - echo "Waiting for services to be ready..."
    - sleep 10
    - npm run db:migrate
    - npm run test:coverage
  artifacts:
    reports:
      junit: test-results.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    when: always
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'

# Integration tests
integration_tests:
  stage: test
  image: node:${NODE_VERSION}-alpine
  <<: *docker_services
  <<: *test_env
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - echo "Waiting for services to be ready..."
    - sleep 10
    - npm run db:migrate
    - npm run db:seed
    - npm run test -- --testPathPattern=integration
  artifacts:
    reports:
      junit: integration-test-results.xml
    when: always
  allow_failure: true

# Build Docker image
build_image:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  needs:
    - lint
    - unit_tests
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG -t $LATEST_TAG .
    - docker push $IMAGE_TAG
    - docker push $LATEST_TAG
  only:
    - main
    - develop
    - merge_requests

# Container security scanning
container_scanning:
  stage: security
  image: aquasec/trivy:latest
  needs:
    - build_image
  script:
    - trivy image --format template --template "@contrib/gitlab.tpl" -o container-scanning-report.json $IMAGE_TAG
  artifacts:
    reports:
      container_scanning: container-scanning-report.json
  only:
    - main
    - develop

# License scanning
license_scanning:
  stage: security
  image: node:${NODE_VERSION}-alpine
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - npm install -g license-checker
    - license-checker --json --out license-report.json
  artifacts:
    reports:
      license_scanning: license-report.json
  allow_failure: true

# SAST (Static Application Security Testing)
sast:
  stage: security
  variables:
    SAST_EXCLUDED_PATHS: 'node_modules, coverage, logs'
  include:
    - template: Security/SAST.gitlab-ci.yml

# Secret detection
secret_detection:
  stage: security
  include:
    - template: Security/Secret-Detection.gitlab-ci.yml

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  environment:
    name: staging
    url: https://api-staging.yourdomain.com
  needs:
    - build_image
    - container_scanning
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image: $IMAGE_TAG"
    # Add your staging deployment commands here
    # Example: kubectl, docker-compose, or cloud provider CLI commands
    - sleep 5 # Simulate deployment time
    - echo "Deployment completed"
    # Health check
    - echo "Running health checks..."
    - curl -f $CI_ENVIRONMENT_URL/health || exit 1
  only:
    - develop

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  environment:
    name: production
    url: https://api.yourdomain.com
  needs:
    - build_image
    - container_scanning
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image: $IMAGE_TAG"
    # Add your production deployment commands here
    - sleep 10 # Simulate deployment time
    - echo "Production deployment completed"
    # Health check
    - echo "Running production health checks..."
    - curl -f $CI_ENVIRONMENT_URL/health || exit 1
  when: manual
  only:
    - main

# Performance testing
performance_test:
  stage: performance
  image: loadimpact/k6:latest
  needs:
    - deploy_staging
  script:
    - |
      cat > performance-test.js << EOF
      import http from 'k6/http';
      import { check, sleep } from 'k6';

      export let options = {
        stages: [
          { duration: '1m', target: 10 },
          { duration: '3m', target: 10 },
          { duration: '1m', target: 0 },
        ],
        thresholds: {
          http_req_duration: ['p(95)<500'],
          http_req_failed: ['rate<0.1'],
        },
      };

      export default function() {
        let response = http.get('${CI_ENVIRONMENT_URL}/health');
        check(response, {
          'status is 200': (r) => r.status === 200,
          'response time < 500ms': (r) => r.timings.duration < 500,
        });
        sleep(1);
      }
      EOF
    - k6 run --out json=performance-results.json performance-test.js
  artifacts:
    reports:
      performance: performance-results.json
  only:
    - develop

# Database migration job (manual)
migrate_database:
  stage: deploy
  image: node:${NODE_VERSION}-alpine
  <<: *node_cache
  <<: *before_script_node
  needs:
    - install_dependencies
  script:
    - npm run db:migrate
  when: manual
  environment:
    name: production
  only:
    - main

# Rollback deployment (manual)
rollback_deployment:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Rolling back deployment..."
    # Add rollback commands here
    - echo "Rollback completed"
  when: manual
  environment:
    name: production
  only:
    - main

# Cleanup old images
cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Cleaning up old images and artifacts..."
    # Add cleanup commands here
  when: always
  allow_failure: true
