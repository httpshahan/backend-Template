name: Security Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate

      - name: Run npm audit fix (dry run)
        run: |
          echo "Checking available fixes..."
          npm audit fix --dry-run

  security-scan:
    name: Security Code Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install security scanning tools
        run: |
          npm install -g eslint-plugin-security
          npm install -g semgrep

      - name: Run ESLint security rules
        run: |
          echo "Running ESLint security scan..."
          npx eslint src/ --ext .js --config .eslintrc.security.js --format json --output-file eslint-security-report.json || echo "{\"results\":[]}" > eslint-security-report.json

      - name: Run Semgrep security scan
        run: |
          echo "Running Semgrep security scan..."
          semgrep --config=auto src/ --json --output=semgrep-report.json || echo "[]" > semgrep-report.json

      - name: Check generated reports
        run: |
          echo "Checking generated security reports..."
          ls -la *.json || true
          echo "ESLint report size: $(wc -c < eslint-security-report.json 2>/dev/null || echo '0') bytes"
          echo "Semgrep report size: $(wc -c < semgrep-report.json 2>/dev/null || echo '0') bytes"

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            eslint-security-report.json
            semgrep-report.json
          if-no-files-found: warn

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'nodejs-backend-template'
          path: '.'
          format: 'JSON'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --exclude "**/node_modules/**"
        continue-on-error: true

      - name: Check dependency check results
        run: |
          echo "Checking dependency check results..."
          ls -la reports/ || mkdir -p reports/
          ls -la reports/ || echo "No dependency check reports generated"

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
          if-no-files-found: warn

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t nodejs-backend-template:test .
          else
            echo "No Dockerfile found, skipping container scan"
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        if: hashFiles('Dockerfile') != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nodejs-backend-template:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: hashFiles('Dockerfile') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, security-scan, dependency-check, secrets-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate security summary
        run: |
          echo "# Security Test Summary" > security-summary.md
          echo "Date: $(date)" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Test Results" >> security-summary.md
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> security-summary.md
          echo "- Security Code Scan: ${{ needs.security-scan.result }}" >> security-summary.md
          echo "- OWASP Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
          echo "- Secrets Detection: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Artifact Status" >> security-summary.md
          echo "Downloaded artifacts:" >> security-summary.md
          ls -la . | grep -E '(security-scan-results|dependency-check-report|security-summary)' || echo "- No artifacts found" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Recommendations" >> security-summary.md
          echo "1. Review any failed security tests" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Address any detected secrets or security issues" >> security-summary.md
          echo "4. Monitor security alerts regularly" >> security-summary.md
          echo "5. Check artifact uploads for detailed security scan results" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Test Results\n\n${summary}`
              });
              
              console.log('Successfully posted security results comment');
            } catch (error) {
              console.error('Failed to post comment:', error);
              // Don't fail the workflow if comment creation fails
            }
