name: Deploy to Render

on:
  push:
    branches: [main, master]
    # Don't run on pull requests to avoid unnecessary deployments
  workflow_dispatch:  # Allow manual deployment trigger
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: backend_template_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          sleep 10
          mysql -h 127.0.0.1 -u root -proot -e "SELECT 1"
          redis-cli -h 127.0.0.1 ping

      - name: Run migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: root
          DB_NAME: backend_template_test
          JWT_SECRET: test-secret-key

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: root
          DB_NAME: backend_template_test
          JWT_SECRET: test-secret-key
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'  render-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on push to main/master, not on PRs
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit info
        id: commit_info
        run: |
          echo "commit_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT

      - name: Start deployment notification
        run: |
          echo "üöÄ Starting deployment to Render..."
          echo "üì¶ Commit: ${{ steps.commit_info.outputs.commit_sha }}"
          echo "üë§ Author: ${{ steps.commit_info.outputs.author }}"
          echo "üí¨ Message: ${{ steps.commit_info.outputs.commit_message }}"

      - name: Deploy to Render
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Deployment Success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Service URL: https://${{ secrets.RENDER_APP_URL }}"
          echo "‚è∞ Deployed at: $(date)"

      - name: Deployment Failed
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs above for details"
          exit 1

      - name: Notify Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ${{ job.status == 'success' && '‚úÖ Deployment Successful' || '‚ùå Deployment Failed' }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ steps.commit_info.outputs.commit_sha }}
            Author: ${{ steps.commit_info.outputs.author }}
            URL: https://${{ secrets.RENDER_APP_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  health-check:
    needs: render-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Wait for deployment to stabilize
        run: |
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 60

      - name: Health Check
        id: health_check
        run: |
          echo "üîç Performing health check..."
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.RENDER_APP_URL }}/api/v1/health)
            if [ $response -eq 200 ]; then
              echo "‚úÖ Health check passed (attempt $i)"
              break
            else
              echo "‚ö†Ô∏è  Health check failed with status code: $response (attempt $i)"
              if [ $i -eq 5 ]; then
                echo "‚ùå Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: API Integration Test
        run: |
          echo "üß™ Running API integration tests..."
          
          # Generate random email for test
          TEST_EMAIL="test-$(date +%s)@example.com"
          
          # Test registration endpoint
          echo "üìù Testing user registration..."
          registration_response=$(curl -s -X POST https://${{ secrets.RENDER_APP_URL }}/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d "{\"firstName\":\"Test\",\"lastName\":\"User\",\"email\":\"$TEST_EMAIL\",\"password\":\"TestPass123!\"}" \
            -w "%{http_code}")
          
          echo "Registration response: $registration_response"
          
          if [[ "$registration_response" =~ 201$ ]]; then
            echo "‚úÖ Registration test passed"
          else
            echo "‚ùå Registration test failed"
            exit 1
          fi

      - name: Performance Test
        run: |
          echo "‚ö° Running basic performance test..."
          
          # Test response time
          response_time=$(curl -s -o /dev/null -w "%{time_total}" https://${{ secrets.RENDER_APP_URL }}/api/v1/health)
          echo "Response time: ${response_time}s"
          
          # Check if response time is reasonable (less than 5 seconds)
          if (( $(echo "$response_time < 5.0" | bc -l) )); then
            echo "‚úÖ Performance test passed"
          else
            echo "‚ö†Ô∏è  Performance test warning: Response time is slow"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "üåê Production URL: https://${{ secrets.RENDER_APP_URL }}"
          echo "üì¶ Deployed Commit: ${GITHUB_SHA::7}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üë§ Author: $(git log -1 --pretty=%an)"
          echo "‚è∞ Deployed at: $(date)"
          echo "‚úÖ Status: ${{ job.status == 'success' && 'SUCCESS' || 'FAILED' }}"
