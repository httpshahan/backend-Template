name: Deploy to Render

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: backend_template_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          sleep 10
          mysql -h 127.0.0.1 -u root -proot -e "SELECT 1"
          redis-cli -h 127.0.0.1 ping

      - name: Run migrations
        run: npm run db:migrate
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: root
          DB_NAME: backend_template_test
          JWT_SECRET: test-secret-key

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: root
          DB_NAME: backend_template_test
          JWT_SECRET: test-secret-key
          REDIS_HOST: 127.0.0.1
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: github.event_name == 'push'

  render-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Notify Deployment Status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  health-check:
    needs: render-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Health Check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.RENDER_APP_URL }}/api/v1/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status code: $response"
            exit 1
          fi

      - name: API Test
        run: |
          # Test registration endpoint
          response=$(curl -s -X POST https://${{ secrets.RENDER_APP_URL }}/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"firstName":"Test","lastName":"User","email":"test@example.com","password":"TestPass123!"}' \
            -w "%{http_code}")

          echo "Registration test response: $response"

          # Check if response contains expected success pattern
          if echo "$response" | grep -q "201"; then
            echo "✅ API test passed"
          else
            echo "❌ API test failed"
            exit 1
          fi
